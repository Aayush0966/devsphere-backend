model User {
  id        String   @id @default(uuid())
  email     String   @unique @db.VarChar(255)
  password  String
  role      Role     @default(MODERATOR)
  memberId  String?  @map("member_id")
  member    members? @relation(fields: [memberId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("user")
}

enum Role {
  ADMIN
  MODERATOR
}

model Project {
  id                  String                @id @default(uuid())
  name                String
  githubLink          String?               @map("github_link")
  demoLink            String?               @map("demo_link")
  tagId               String
  tag                 Tag                   @relation(fields: [tagId], references: [id])
  tech_stack          String[]
  description         String                @db.Text
  thumbnailUrl        String?               @map("thumbnail_url")
  createdAt           DateTime              @default(now()) @map("created_at")
  updatedAt           DateTime              @updatedAt @map("updated_at")
  ProjectContributors ProjectContributors[]
  Contributor         Contributor?          @relation(fields: [contributorId], references: [id])
  contributorId       String?

  @@map("projects")
}

model Tag {
  id      String    @id @default(uuid())
  name    String    @unique
  Project Project[]

  @@map("tags")
}

model Contributor {
  id             String  @id @default(uuid())
  name           String
  avatarUrl      String? @map("avatar_url")
  githubUsername String? @map("github_username")

  Project             Project[]
  ProjectContributors ProjectContributors[]

  @@map("contributors")
}

model ProjectContributors {
  id            String      @id @default(uuid())
  projectId     String      @map("project_id")
  contributorId String      @map("contributor_id")
  project       Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  contributor   Contributor @relation(fields: [contributorId], references: [id], onDelete: Cascade)

  @@map("project_contributors")
}

model Events {
  id            String          @id @default(uuid())
  name          String
  description   String          @db.Text
  status        EventStatus     @default(UPCOMING)
  EventSchedule EventSchedule[]

  @@map("events")
}

model EventSchedule {
  id          String   @id @default(uuid())
  startDate   DateTime @map("start_date")
  endDate     DateTime @map("end_date")
  description String   @db.Text
  eventId     String   @map("event_id")
  event       Events   @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@map("event_schedule")
}

enum EventStatus {
  UPCOMING
  ONGOING
  COMPLETED
}

model members {
  id   String   @id @default(uuid())
  name String
  role String
  year DateTime
  User User[]

  @@map("members")
}
