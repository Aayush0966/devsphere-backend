model account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime
  user                  user      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model contributors {
  id                   String                 @id
  name                 String
  avatar_url           String?
  github_username      String?
  project_contributors project_contributors[]
}

model event_schedule {
  id          String   @id
  start_date  DateTime
  end_date    DateTime
  description String
  event_id    String
  events      events   @relation(fields: [event_id], references: [id], onDelete: Cascade)
}

model events {
  id             String           @id
  name           String
  description    String
  status         EventStatus      @default(UPCOMING)
  event_schedule event_schedule[]
}

model members {
  id     String       @id
  name   String
  role   String
  year   DateTime
  status MemberStatus
  user   user[]
}

model project_contributors {
  id             String       @id
  project_id     String
  contributor_id String
  contributors   contributors @relation(fields: [contributor_id], references: [id], onDelete: Cascade)
  projects       projects     @relation(fields: [project_id], references: [id], onDelete: Cascade)
}

model project_tags {
  id         String   @id
  project_id String
  tag_id     String
  projects   projects @relation(fields: [project_id], references: [id], onDelete: Cascade)
  tags       tags     @relation(fields: [tag_id], references: [id], onDelete: Cascade)
}

model projects {
  id                   String                 @id
  name                 String
  github_link          String?
  demo_link            String?
  tech_stack           String[]
  description          String
  thumbnail_url        String?
  created_at           DateTime               @default(now())
  updated_at           DateTime
  project_contributors project_contributors[]
  project_tags         project_tags[]
}

model session {
  id        String   @id
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      user     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model tags {
  id           String         @id
  name         String         @unique
  project_tags project_tags[]
}

model user {
  id            String    @id
  email         String    @unique @db.VarChar(255)
  role          Role      @default(MODERATOR)
  member_id     String?
  created_at    DateTime  @default(now())
  updated_at    DateTime
  emailVerified Boolean   @default(false)
  image         String?
  account       account[]
  session       session[]
  members       members?  @relation(fields: [member_id], references: [id])
}

model verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())
}

enum EventStatus {
  UPCOMING
  ONGOING
  COMPLETED
}

enum MemberStatus {
  ACTIVE
  INACTIVE
}

enum Role {
  ADMIN
  MODERATOR
}