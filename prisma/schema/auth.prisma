model User {
  id            String    @id @default(uuid())
  email         String    @unique @db.VarChar(255)
  role          Role      @default(MODERATOR)
  emailVerified Boolean   @default(false)
  image         String?
  memberId      String?   @map("member_id")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  member        member?   @relation(fields: [memberId], references: [id])
  sessions      Session[]
  accounts      Account[]

  @@map("user")
}


model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}
model Project {
  id                  String                @id @default(uuid())
  name                String
  githubLink          String?               @map("github_link")
  demoLink            String?               @map("demo_link")
  tagId               String
  tech_stack          String[]
  description         String
  thumbnailUrl        String?               @map("thumbnail_url")
  createdAt           DateTime              @default(now()) @map("created_at")
  updatedAt           DateTime              @updatedAt @map("updated_at")
  contributorId       String?
  ProjectContributors ProjectContributors[]
  Contributor         Contributor?          @relation(fields: [contributorId], references: [id])
  tag                 Tag                   @relation(fields: [tagId], references: [id])

  @@map("projects")
}

model Tag {
  id      String    @id @default(uuid())
  name    String    @unique
  Project Project[]

  @@map("tags")
}

model Contributor {
  id                  String                @id @default(uuid())
  name                String
  avatarUrl           String?               @map("avatar_url")
  githubUsername      String?               @map("github_username")
  ProjectContributors ProjectContributors[]
  Project             Project[]

  @@map("contributors")
}

model ProjectContributors {
  id            String      @id @default(uuid())
  projectId     String      @map("project_id")
  contributorId String      @map("contributor_id")
  contributor   Contributor @relation(fields: [contributorId], references: [id], onDelete: Cascade)
  project       Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("project_contributors")
}

model Events {
  id            String          @id @default(uuid())
  name          String
  description   String
  status        EventStatus     @default(UPCOMING)
  EventSchedule EventSchedule[]

  @@map("events")
}

model EventSchedule {
  id          String   @id @default(uuid())
  startDate   DateTime @map("start_date")
  endDate     DateTime @map("end_date")
  description String
  eventId     String   @map("event_id")
  event       Events   @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@map("event_schedule")
}

model member {
  id     String       @id @default(uuid())
  name   String
  role   String
  year   DateTime
  status MemberStatus
  User   User[]

  @@map("members")
}

enum MemberStatus {
  ACTIVE
  INACTIVE
}

enum Role {
  ADMIN
  MODERATOR
}

enum EventStatus {
  UPCOMING
  ONGOING
  COMPLETED
}
